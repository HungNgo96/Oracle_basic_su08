SET FEEDBACK OFF 

 Create TABLE "EMPLOYEE" 
   (	
    "ID" NUMBER GENERATED by default on null as IDENTITY, 
	"NAME" VARCHAR2(255 BYTE), 
	"SALARY" NUMBER(10,0), 
	"ADDRESS" VARCHAR2(500 BYTE)
   )
   
   /
   Insert into EMPLOYEE (ID,NAME,SALARY,ADDRESS) values (100,'Mukesh',20000,'India');
Insert into EMPLOYEE (ID,NAME,SALARY,ADDRESS) values (101,'Rion',28000,'US');
Insert into EMPLOYEE (ID,NAME,SALARY,ADDRESS) values (102,'Mahesh',10000,'India');
Insert into EMPLOYEE (ID,NAME,SALARY,ADDRESS) values (103,'Banky',20000,'India');


CREATE OR REPLACE PROCEDURE "USP_GETEMPLOYEES" (
    EMPCURSOR OUT SYS_REFCURSOR
)
AS
Begin
Open EMPCURSOR For
SELECT ID, NAME, SALARY,ADDRESS FROM Employee;
End;

/
CREATE OR REPLACE PROCEDURE "USP_GETEMPLOYEEDETAILS" 
(
  EMP_ID IN INT,
  EMP_DETAIL_CURSOR OUT SYS_REFCURSOR  
) AS 
BEGIN
    OPEN EMP_DETAIL_CURSOR FOR
    SELECT ID, NAME, SALARY,ADDRESS FROM Employee WHERE ID = EMP_ID;
END;
/
--new package employee_resources
create or replace package employee_resources  
as  
 type t_cursor is ref cursor;  
 procedure get_employee(cur_employees out t_cursor);  
end employee_resources;  
--create package body
create or replace package body employee_resources  
as  
 procedure get_employee(cur_employees out t_cursor)  
 is  
 begin  
  open cur_employees for select * from EMPLOYEE;  
 end get_employee;  
end employee_resources; 

/

--new package employee_resources2
create or replace package employee_resources2_t_cursor  
as
 
 type t_cursor is ref cursor;
  procedure get_employee_user(cur_employees out t_cursor, cur_users out t_cursor);
  procedure get_employee_user_by_id(cur_employees out t_cursor,  p_id int);
  FUNCTION totalEmployee
    RETURN int;
end employee_resources2_t_cursor;
--create package body

create or replace package body employee_resources2_t_cursor  
as  
    --------------------
     procedure get_employee_user(cur_employees out t_cursor, cur_users out t_cursor)  
     is  
     begin  
      open cur_employees for select * from employee;  
      open cur_users for select * from users;  
     end get_employee_user;  
     ------------------
     procedure get_employee_user_by_id(cur_employees out t_cursor, p_id int)  
     is  
     begin  
      open cur_employees for select * from employee where ID = p_id ;  
      
     end get_employee_user_by_id;  
     --------------------
     function totalEmployee  return int
     IS
     resultData int;
        begin
        
        select count(1) into  resultData
        from employee;
        
        return resultData;
        
        end totalEmployee;
 
end employee_resources2_t_cursor;

 --excute function
select employee_resources2_t_cursor.totalEmployee()
from dual;

select *
from employee


